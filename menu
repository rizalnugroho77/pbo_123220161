package tugaspbo;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class menu {
    private JFrame frame;
    private JTable table;
    private JButton exitButton, updateButton, addButton, deleteButton;
    private DefaultTableModel model;
    private JTextField nameField, storylineField, contentField, creativityField;

    String DBurl = "jdbc:mysql://localhost/pbo";
    String DBUsername = "root";
    String DBPassword = "";
    Connection connection;

    public menu() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            connection = DriverManager.getConnection(DBurl, DBUsername, DBPassword);
            System.out.println("Koneksi Berhasil");
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Database driver not found: " + ex.getMessage());
            System.out.println("Koneksi Gagal: Database driver not found");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Failed to connect to database: " + ex.getMessage());
            System.out.println("Koneksi Gagal: " + ex.getMessage());
        }


        frame = new JFrame("Animate Menu");
        frame.setSize(800, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout(10, 10));

        // Initialize the table model
        String[] columnNames = {"Nama", "Alur", "Penokohan", "Akting", "Nilai"};
        model = new DefaultTableModel(columnNames, 0);
        fetchTableData(); // Fetch data from the database
        table = new JTable(model);
        table.getSelectionModel().addListSelectionListener(this::tableSelectionChanged);

        // Initialize text fields for input
        nameField = new JTextField(15);
        storylineField = new JTextField(15);
        contentField = new JTextField(15);
        creativityField = new JTextField(15);

        // Initialize the buttons
        exitButton = new JButton("Exit");
        updateButton = new JButton("Update");
        addButton = new JButton("Add");
        deleteButton = new JButton("Delete");

        // Set button actions
        exitButton.addActionListener(this::exitAction);
        updateButton.addActionListener(this::updateAction);
        addButton.addActionListener(this::addAction);
        deleteButton.addActionListener(this::deleteAction);

        // Input panel setup
        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(0, 2, 10, 10));
        inputPanel.add(new JLabel("Judul:"));
        inputPanel.add(nameField);
        inputPanel.add(new JLabel("Alur Cerita:"));
        inputPanel.add(storylineField);
        inputPanel.add(new JLabel("Penokohan :"));
        inputPanel.add(contentField);
        inputPanel.add(new JLabel("Akting :"));
        inputPanel.add(creativityField);

        // Button panel setup
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        buttonPanel.add(addButton);
        buttonPanel.add(updateButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(exitButton);

        // Add components to the frame
        frame.add(inputPanel, BorderLayout.NORTH);
        frame.add(new JScrollPane(table), BorderLayout.CENTER);
        frame.add(buttonPanel, BorderLayout.SOUTH);

        // Display the frame
        frame.setVisible(true);
    }

    private void fetchTableData() {
        try {
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM movie");
            while (resultSet.next()) {
                String nama = resultSet.getString("judul");
                double alur = resultSet.getDouble("alur");
                double penokohan = resultSet.getDouble("penokohan");
                double akting = resultSet.getDouble("akting");
                double nilai = resultSet.getDouble("nilai");
                model.addRow(new Object[]{nama, alur, penokohan, akting, nilai});
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void tableSelectionChanged(ListSelectionEvent e) {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            nameField.setText(model.getValueAt(selectedRow, 0).toString());
            storylineField.setText(model.getValueAt(selectedRow, 1).toString());
            contentField.setText(model.getValueAt(selectedRow, 2).toString());
            creativityField.setText(model.getValueAt(selectedRow, 3).toString());
        }
    }

    private void exitAction(ActionEvent event) {
        frame.setVisible(false);
        // Logic to return to FirstMenu goes here
    }

    private void updateAction(ActionEvent event) {
        try {
            String judul = nameField.getText();
            double alur = Double.parseDouble(storylineField.getText());
            double penokohan = Double.parseDouble(contentField.getText());
            double akting = Double.parseDouble(creativityField.getText());
            double nilai = (alur + penokohan + akting) / 3;

            String query = "UPDATE movie SET alur = " + alur + ", penokohan = " + penokohan +
                    ", akting = " + akting + ", nilai = " + nilai + " WHERE judul = '" + judul + "'";
            Statement statement = connection.createStatement();
            statement.executeUpdate(query);
            JOptionPane.showMessageDialog(null, "Data Berhasil diupdate");
            clearTextFields();
            updateTable(); // Update the table model
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void deleteAction(ActionEvent event) {
        try {
            String judul = nameField.getText();
            String query = "DELETE FROM movie WHERE judul = '" + judul + "'";
            Statement statement = connection.createStatement();
            statement.executeUpdate(query);
            JOptionPane.showMessageDialog(null, "Data Berhasil dihapus");
            clearTextFields();
            updateTable(); // Update the table model
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void addAction(ActionEvent event) {
        try {
            String judul = nameField.getText();
            double alur = Double.parseDouble(storylineField.getText());
            double penokohan = Double.parseDouble(contentField.getText());
            double akting = Double.parseDouble(creativityField.getText());
            double nilai = (alur + penokohan + akting) / 3;

            String query = "INSERT INTO movie (judul, alur, penokohan, akting, nilai) VALUES ('" +
                    judul + "', " + alur + ", " + penokohan + ", " + akting + ", " + nilai + ")";
            Statement statement = connection.createStatement();
            statement.executeUpdate(query);
            JOptionPane.showMessageDialog(null, "Data Berhasil ditambahkan");
            clearTextFields();
            updateTable(); // Update the table model
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void clearTextFields() {
        nameField.setText("");
        storylineField.setText("");
        contentField.setText("");
        creativityField.setText("");
    }

    private void updateTable() {
        model.setRowCount(0); // Clear existing data in the table model
        fetchTableData(); // Fetch updated data from the database
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(menu::new);
    }
}
